{"version":3,"sources":["components/button/button.component.jsx","components/TodoList/todolist.component.jsx","components/button/reset.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoButton","className","onClick","this","props","addInput","Component","TodoList","toggleInputFocus","focus","console","log","todoElements","state","data","map","todoItems","index","todoElement","length","type","placeholder","value","maxLength","ref","input","onChange","e","handleChange","onKeyPress","handleKeyPress","handleRemove","key","Resetbutton","resetAll","App","dataLength","trim","setState","alert","event","target","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9f1bbc6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./button.style.css\";\r\n\r\nclass TodoButton extends Component {\r\n  render() {\r\n    return (\r\n      <button className=\"add-button\" onClick={this.props.addInput}>\r\n        +\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoButton;\r\n","import React, { Component } from \"react\";\r\nimport \"./todolist.style.css\";\r\n\r\nclass TodoList extends Component {\r\n  \r\n  componentDidUpdate() {\r\n    // console.log(\"@@@@@@@@@@@@ 2\");\r\n    // console.dir(this.props.state.data);\r\n    this.toggleInputFocus.focus();\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props);\r\n\r\n    const todoElements = this.props.state.data.map((todoItems, index) => {\r\n      let todoElement;\r\n      if (this.props.state.data.length - 1 === index) {\r\n        todoElement = (\r\n          <input\r\n            type=\"text\"\r\n            className=\"input input-field\"\r\n            placeholder=\"Add Todo here\"\r\n            value={todoItems}\r\n            maxLength=\"36\"\r\n            ref={input => {\r\n              this.toggleInputFocus = input;\r\n            }}\r\n            onChange={e => this.props.handleChange(e, index)}\r\n            onKeyPress={e => this.props.handleKeyPress(e)}\r\n          />\r\n        );\r\n      } else {\r\n        todoElement = (\r\n          <div className=\"saved-todo\">\r\n            <input type=\"radio\" className=\"checkbox-container\" />\r\n            <p className=\"todo-main__items\">{todoItems} </p>\r\n            <button\r\n              className=\"add-button button-small\"\r\n              onClick={() => this.props.handleRemove(index)}\r\n            >\r\n              X\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n      return <li key={index}>{todoElement} </li>;\r\n    });\r\n    return (\r\n      <div>\r\n        <ul className=\"saved-todo__list\">{todoElements}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\r\nimport \"./reset.style.css\";\r\n\r\nclass Resetbutton extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"add-button reset-button\"\r\n          onClick={this.props.resetAll}\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Resetbutton;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport TodoButton from \"./components/button/button.component.jsx\";\r\nimport TodoList from \"./components/TodoList/todolist.component.jsx\";\r\nimport Resetbutton from \"./components/button/reset.component.jsx\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: []\r\n    };\r\n    // changed to Es6 arrow function so no need to bind\r\n    // this.addInput = this.addInput.bind(this);\r\n    // this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  addInput = () => {\r\n    // console.log(\"ADDDED\");\r\n\r\n    const dataLength = this.state.data.length;\r\n\r\n    if (dataLength === 0 || this.state.data[dataLength - 1].trim() !== \"\") {\r\n      this.setState({ data: [...this.state.data, \"\"] });\r\n    } else {\r\n      alert(\"Please Enter Your Todo First\");\r\n    }\r\n  };\r\n\r\n  handleKeyPress = event => {\r\n    if (event.key === \"Enter\") {\r\n      // console.log('aaaaa')\r\n      this.addInput();\r\n    }\r\n  };\r\n\r\n  handleChange = (e, index) => {\r\n    this.state.data[index] = e.target.value.trim();\r\n\r\n    //set the changed state\r\n    this.setState({ data: this.state.data });\r\n    console.log(this.state.data, \"!!!\");\r\n  };\r\n\r\n  handleRemove = index => {\r\n    //remove items at the index\r\n    this.state.data.splice(index, 1);\r\n    console.log(this.state.data, \"!!!\");\r\n\r\n    //update the state\r\n    this.setState({ data: this.state.data });\r\n    console.log(this.state.data, \"!!!\");\r\n  };\r\n\r\n  resetAll = index => {\r\n    if (this.state.data.length > 1) {\r\n      this.state.data.splice(index, this.state.data.length - 1);\r\n      console.log(this.state.data, \"!!!\");\r\n\r\n      //update the state\r\n      this.setState({ data: this.state.data });\r\n      console.log(this.state.data, \"!!!\");\r\n    }\r\n\r\n    // //second method\r\n    // this.setState({ data: [\"\"] });\r\n    // console.log(this.state.data, \"!!!\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"header\">\r\n          <h1 className=\"main-heading\">Todo List</h1>\r\n          <Resetbutton resetAll={this.resetAll}> </Resetbutton>\r\n          <TodoButton addInput={this.addInput}> </TodoButton>\r\n        </header>\r\n        <TodoList\r\n          state={this.state}\r\n          handleKeyPress={this.handleKeyPress}\r\n          handleChange={this.handleChange}\r\n          handleRemove={this.handleRemove}\r\n        ></TodoList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}