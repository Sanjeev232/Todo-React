{"version":3,"sources":["components/button/button.component.jsx","components/TodoList/todolist.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoButton","className","onClick","this","props","addInput","Component","TodoList","toggleInputFocus","focus","console","log","todoElements","state","data","map","todoItems","index","todoElement","length","type","placeholder","value","ref","input","onChange","e","handleChange","onKeyPress","handleKeyPress","handleRemove","key","App","dataLength","setState","alert","event","target","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAaeA,G,6LARX,OACE,4BAAQC,UAAU,aAAaC,QAASC,KAAKC,MAAMC,UAAnD,S,GAHmBC,cC8CVC,G,mMA1CXJ,KAAKK,iBAAiBC,U,+BAGd,IAAD,OACPC,QAAQC,IAAIR,KAAKC,OAEjB,IAAMQ,EAAeT,KAAKC,MAAMS,MAAMC,KAAKC,KAAI,SAACC,EAAWC,GACzD,IAAIC,EA6BJ,OA3BEA,EADE,EAAKd,MAAMS,MAAMC,KAAKK,OAAS,IAAMF,EAErC,2BACEG,KAAK,OACLnB,UAAU,oBACVoB,YAAY,gBACZC,MAAON,EACPO,IAAK,SAAAC,GACH,EAAKhB,iBAAmBgB,GAE1BC,SAAU,SAAAC,GAAC,OAAI,EAAKtB,MAAMuB,aAAaD,EAAGT,IAC1CW,WAAY,SAAAF,GAAC,OAAI,EAAKtB,MAAMyB,eAAeH,MAK7C,yBAAKzB,UAAU,cACb,2BAAOmB,KAAK,QAAQnB,UAAW,uBAC/B,uBAAGA,UAAU,oBAAoBe,EAAjC,KACA,4BACEf,UAAU,0BACVC,QAAS,kBAAM,EAAKE,MAAM0B,aAAab,KAFzC,MASC,wBAAIc,IAAKd,GAAQC,EAAjB,QAET,OAAO,wBAAIjB,UAAU,oBAAoBW,O,GA1CtBN,cCmER0B,E,YAhEb,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,SAAW,WAGT,IAAM4B,EAAa,EAAKpB,MAAMC,KAAKK,OAEhB,IAAfc,GAAwD,KAApC,EAAKpB,MAAMC,KAAKmB,EAAa,GACnD,EAAKC,SAAS,CAAEpB,KAAK,GAAD,mBAAM,EAAKD,MAAMC,MAAjB,CAAuB,OAE3CqB,MAAM,iCAlBS,EAsBnBN,eAAiB,SAAAO,GACG,UAAdA,EAAML,KAER,EAAK1B,YAzBU,EA6BnBsB,aAAe,SAACD,EAAGT,GACjB,EAAKJ,MAAMC,KAAKG,GAASS,EAAEW,OAAOf,MAGlC,EAAKY,SAAS,CAAEpB,KAAM,EAAKD,MAAMC,OACjCJ,QAAQC,IAAI,EAAKE,MAAMC,KAAM,QAlCZ,EAqCnBgB,aAAe,SAAAb,GAEb,EAAKJ,MAAMC,KAAKwB,OAAOrB,EAAO,GAC9BP,QAAQC,IAAI,EAAKE,MAAMC,KAAM,OAG7B,EAAKoB,SAAS,CAAEpB,KAAM,EAAKD,MAAMC,QAzCjC,EAAKD,MAAQ,CACXC,KAAM,IAHS,E,sEA+CjB,OACE,yBAAKb,UAAU,aACb,4BAAQA,UAAU,UAChB,wBAAIA,UAAU,gBAAd,aACA,kBAAC,EAAD,CAAYI,SAAUF,KAAKE,UAA3B,MAEF,kBAAC,EAAD,CACEQ,MAAOV,KAAKU,MACZgB,eAAgB1B,KAAK0B,eACrBF,aAAcxB,KAAKwB,aACnBG,aAAc3B,KAAK2B,oB,GA1DXxB,aCOEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ceecee45.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./button.style.css\";\r\n\r\nclass TodoButton extends Component {\r\n  render() {\r\n    return (\r\n      <button className=\"add-button\" onClick={this.props.addInput}>\r\n        +\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoButton;\r\n","import React, { Component } from \"react\";\r\nimport \"./todolist.style.css\";\r\n\r\nclass TodoList extends Component {\r\n  componentDidUpdate() {\r\n    // console.log(\"@@@@@@@@@@@@ 2\");\r\n    // console.dir(this.props.state.data);\r\n    this.toggleInputFocus.focus();\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props);\r\n\r\n    const todoElements = this.props.state.data.map((todoItems, index) => {\r\n      let todoElement;\r\n      if (this.props.state.data.length - 1 === index) {\r\n        todoElement = (\r\n          <input\r\n            type=\"text\"\r\n            className=\"input input-field\"\r\n            placeholder=\"Add Todo here\"\r\n            value={todoItems}\r\n            ref={input => {\r\n              this.toggleInputFocus = input;\r\n            }}\r\n            onChange={e => this.props.handleChange(e, index)}\r\n            onKeyPress={e => this.props.handleKeyPress(e)}\r\n          />\r\n        );\r\n      } else {\r\n        todoElement = (\r\n          <div className=\"saved-todo\">\r\n            <input type=\"radio\" className =\"checkbox-container\"/>\r\n            <p className=\"todo-main__items\">{todoItems} </p>\r\n            <button\r\n              className=\"add-button button-small\"\r\n              onClick={() => this.props.handleRemove(index)}\r\n            >\r\n              X\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n      return <li key={index}>{todoElement} </li>;\r\n    });\r\n    return <ul className=\"saved-todo__list\">{todoElements}</ul>;\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport TodoButton from \"./components/button/button.component.jsx\";\r\nimport TodoList from \"./components/TodoList/todolist.component.jsx\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: []\r\n    };\r\n    // changed to Es6 arrow function so no need to bind\r\n    // this.addInput = this.addInput.bind(this);\r\n    // this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  addInput = () => {\r\n    // console.log(\"ADDDED\");\r\n\r\n    const dataLength = this.state.data.length;\r\n\r\n    if (dataLength === 0 || this.state.data[dataLength - 1] !== \"\") {\r\n      this.setState({ data: [...this.state.data, \"\"] });\r\n    } else {\r\n      alert(\"Please Enter Your Todo First\");\r\n    }\r\n  };\r\n\r\n  handleKeyPress = event => {\r\n    if (event.key === \"Enter\") {\r\n      // console.log('aaaaa')\r\n      this.addInput();\r\n    }\r\n  };\r\n\r\n  handleChange = (e, index) => {\r\n    this.state.data[index] = e.target.value;\r\n\r\n    //set the changed state\r\n    this.setState({ data: this.state.data });\r\n    console.log(this.state.data, \"!!!\");\r\n  };\r\n\r\n  handleRemove = index => {\r\n    //remove items at the index\r\n    this.state.data.splice(index, 1);\r\n    console.log(this.state.data, \"!!!\");\r\n\r\n    //update the state\r\n    this.setState({ data: this.state.data });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"header\">\r\n          <h1 className=\"main-heading\">Todo List</h1>\r\n          <TodoButton addInput={this.addInput}> </TodoButton>\r\n        </header>\r\n        <TodoList\r\n          state={this.state}\r\n          handleKeyPress={this.handleKeyPress}\r\n          handleChange={this.handleChange}\r\n          handleRemove={this.handleRemove}\r\n        ></TodoList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}